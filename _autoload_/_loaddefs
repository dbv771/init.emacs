;;; _loaddefs --- automatically extracted autoloads
;;
;;; Code:


;;;### (autoloads (average) "+arith" "+arith.el" (20356 22944))
;;; Generated autoloads from +arith.el

(autoload 'average "+arith" "\


\(fn &rest LST)" nil nil)

;;;***

;;;### (autoloads (my-auto-pair) "+auto-pair" "+auto-pair.el" (20505
;;;;;;  16792))
;;; Generated autoloads from +auto-pair.el

(autoload 'my-auto-pair "+auto-pair" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (uatld) "+autoload" "+autoload.el" (20300 57446))
;;; Generated autoloads from +autoload.el

(autoload 'uatld "+autoload" "\


\(fn DIR &optional LOADDEFS BASEDIR)" nil nil)

;;;***

;;;### (autoloads (def-keys-low bind-keys) "+bind-keys" "+bind-keys.el"
;;;;;;  (20510 37453))
;;; Generated autoloads from +bind-keys.el

(autoload 'bind-keys "+bind-keys" "\
bind some key like \"C-m\" \"C-i\" \"C-[\"

\(fn MAP &rest KD)" nil nil)

(autoload 'def-keys-low "+bind-keys" "\
bind some key like \"C-m\" \"C-i\" \"C-[\"

\(fn MAP &rest KD)" nil nil)

;;;***

;;;### (autoloads (my-clean-buffer substring-buffer-name) "+buffer"
;;;;;;  "+buffer.el" (20219 6040))
;;; Generated autoloads from +buffer.el

(autoload 'substring-buffer-name "+buffer" "\
使用 substring 截取文件名时，在 buffer-name 后面加几个字符，防止文件名过短引发错误。m n 参数同`substring'的 from to，可选参数 x 存在时截取带路径的文件名。

\(fn M N &optional X)" nil nil)

(defvar my-clean-buffers-names '("\\*Completions" "\\*Compile-Log" "\\*.*[Oo]utput\\*$" "\\*grep" "\\*magit" "\\*Kill" "\\*Apropos" "\\*compilation" "\\*Customize" "\\*Calc" "\\keywiz-scores" "\\*BBDB\\*" "\\*trace of SMTP" "\\*vc" "\\*cvs" "\\*keywiz" "\\*WoMan-Log" "\\*tramp" "\\*desktop\\*") "\
List of regexps matching names of buffers to kill.")

(defvar my-clean-buffers-modes '(help-mode) "\
List of modes whose buffers will be killed.")

(autoload 'my-clean-buffer "+buffer" "\
Kill buffers as per `my-clean-buffer-list' and `my-clean-buffer-modes'.

\(fn)" t nil)

;;;***

;;;### (autoloads (calc-column copy-sexp-on-column copy-word-on-column)
;;;;;;  "+column" "+column.el" (20356 20478))
;;; Generated autoloads from +column.el

(autoload 'copy-word-on-column "+column" "\


\(fn &optional N)" t nil)

(autoload 'copy-sexp-on-column "+column" "\


\(fn &optional N)" t nil)

(autoload 'calc-column "+column" "\


\(fn FN)" t nil)

;;;***

;;;### (autoloads (rename-file-specify-extension) "+dired" "+dired.el"
;;;;;;  (20502 45876))
;;; Generated autoloads from +dired.el

(autoload 'rename-file-specify-extension "+dired" "\


\(fn &optional SUF)" t nil)

;;;***

;;;### (autoloads (del^M unix2dos dos2unix) "+dos2unix" "+dos2unix.el"
;;;;;;  (20290 30047))
;;; Generated autoloads from +dos2unix.el

(autoload 'dos2unix "+dos2unix" "\
Convert a DOS formatted text buffer to UNIX format

\(fn)" t nil)

(autoload 'unix2dos "+dos2unix" "\
Convert a UNIX formatted text buffer to DOS format

\(fn)" t nil)

(autoload 'del^M "+dos2unix" "\
Not documented

\(fn)" t nil)

;;;***

;;;### (autoloads (smart-backward-kill resize-horizontal-space beacon
;;;;;;  swap-point) "+edit" "+edit.el" (20754 38256))
;;; Generated autoloads from +edit.el

(autoload 'swap-point "+edit" "\


\(fn)" t nil)

(autoload 'beacon "+edit" "\


\(fn &optional N)" t nil)

(autoload 'resize-horizontal-space "+edit" "\


\(fn &optional BACKWARD-ONLY)" t nil)

(autoload 'smart-backward-kill "+edit" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (parallel-edit) "+edit-ad" "+edit-ad.el" (20505
;;;;;;  13737))
;;; Generated autoloads from +edit-ad.el

(autoload 'parallel-edit "+edit-ad" "\


\(fn POSITION-LIST &optional PRT)" t nil)

;;;***

;;;### (autoloads (outside-kill outside) "+edit-lisp" "+edit-lisp.el"
;;;;;;  (20505 14091))
;;; Generated autoloads from +edit-lisp.el

(autoload 'outside "+edit-lisp" "\
up list N level, append PRE ahead and SUF behind, backward M char

\(fn O B S &optional N)" t nil)

(autoload 'outside-kill "+edit-lisp" "\
up list N level, append PRE ahead and SUF behind, backward M char

\(fn &optional N)" t nil)

;;;***

;;;### (autoloads (write-temp find-temp read-lines) "+file" "+file.el"
;;;;;;  (20281 14467))
;;; Generated autoloads from +file.el

(autoload 'read-lines "+file" "\
Return a list of lines in FILEPATH.

\(fn FILEPATH)" nil nil)

(autoload 'find-temp "+file" "\


\(fn &optional SUFFIX)" t nil)

(autoload 'write-temp "+file" "\


\(fn FILENAME &optional CONFIRM)" t nil)

;;;***

;;;### (autoloads (custom-buffer-face-mode my-buffer-face-mode set-my-ui-font
;;;;;;  set-my-bf-mode set-my-font set-font set-my-font0 usage-font)
;;;;;;  "+font" "+font.el" (20323 28885))
;;; Generated autoloads from +font.el

(autoload 'usage-font "+font" "\


\(fn &rest FONTS)" nil nil)

(autoload 'set-my-font0 "+font" "\


\(fn &rest LST)" nil nil)

(autoload 'set-font "+font" "\


\(fn SCRIPT FONT &optional SIZE)" nil nil)

(autoload 'set-my-font "+font" "\


\(fn BASE-FONTS BASE-FONT-SIZE &optional EXT-FONTS EXT-FONT-SIZE)" nil nil)

(autoload 'set-my-bf-mode "+font" "\
set buffer face mode

\(fn FONT SIZE)" nil nil)

(autoload 'set-my-ui-font "+font" "\
set mode-line & header-line

\(fn HEIGHT FONT)" nil nil)

(autoload 'my-buffer-face-mode "+font" "\


\(fn &optional LS)" nil nil)

(autoload 'custom-buffer-face-mode "+font" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (set-local-variable temp-func-call temp-func-add)
;;;;;;  "+function" "+function.el" (20283 43983))
;;; Generated autoloads from +function.el

(defvar temp-func-list '((let ((cnt 0) (acc nil)) (mapc (lambda (x) (setq acc (concat acc "\n" (number-to-string (setq cnt (1+ cnt))) ": " (prin1-to-string x)))) (butlast temp-func-list)) acc)))

(autoload 'temp-func-add "+function" "\


\(fn &optional BEG END)" t nil)

(autoload 'temp-func-call "+function" "\


\(fn &optional N)" t nil)

(autoload 'set-local-variable "+function" "\


\(fn &optional V)" t nil)

;;;***

;;;### (autoloads (list-hash build-hash-table cons2hash) "+hash"
;;;;;;  "+hash.el" (20219 6040))
;;; Generated autoloads from +hash.el

(autoload 'cons2hash "+hash" "\


\(fn LST)" nil nil)

(autoload 'build-hash-table "+hash" "\


\(fn &rest LST)" nil nil)

(autoload 'list-hash "+hash" "\


\(fn HASH-TABLE &optional WITH-VALUE)" nil nil)

;;;***

;;;### (autoloads (insert-doc-head insert-delimit-line insert-time
;;;;;;  insert-autoload-magic-comment comment-block) "+insert" "+insert.el"
;;;;;;  (20556 11551))
;;; Generated autoloads from +insert.el

(autoload 'comment-block "+insert" "\


\(fn &optional BEG END)" t nil)

(autoload 'insert-autoload-magic-comment "+insert" "\


\(fn)" t nil)

(autoload 'insert-time "+insert" "\


\(fn &optional TIME FORMAT)" t nil)

(autoload 'insert-delimit-line "+insert" "\


\(fn &optional N TIME)" t nil)

(autoload 'insert-doc-head "+insert" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (add-to-list-p merge-lists zip-lists mkal to-alist-l)
;;;;;;  "+list" "+list.el" (20501 22718))
;;; Generated autoloads from +list.el

(autoload 'to-alist-l "+list" "\
(to-alist-l '(1 2 3 4 5 6)) => ((1 . 2) (3 . 4) (5 . 6))

\(fn &rest LST)" nil nil)

(autoload 'mkal "+list" "\
(mkal 1 2 3 4 5 6) => ((1 . 2) (3 . 4) (5 . 6))

\(fn &rest REST)" nil (quote macro))

(autoload 'zip-lists "+list" "\
(zip-lists '(1 3 5) '(2 4 6)) => ((1 . 2) (3 . 4) (5 . 6))

\(fn F A &optional B)" nil nil)

(autoload 'merge-lists "+list" "\
(merge-lists '(1 2) '(3 4) '(5 6)) => ((1 3 5) (2 4 6))

\(fn &rest LISTS)" nil nil)

(autoload 'add-to-list-p "+list" "\
See also `add-to-list-x'

\(fn LIST-VAR &optional BASE &rest REST)" nil nil)

;;;***

;;;### (autoloads (load1 load-once) "+load" "+load.el" (20315 24964))
;;; Generated autoloads from +load.el

(defvar *load-times* (make-hash-table :test 'equal :size 20))

(autoload 'load-once "+load" "\


\(fn &rest S)" nil (quote macro))

(autoload 'load1 "+load" "\


\(fn FILE)" nil nil)

;;;***

;;;### (autoloads (xand xor) "+logic" "+logic.el" (20286 25132))
;;; Generated autoloads from +logic.el

(autoload 'xor "+logic" "\
like find-if

\(fn FN &rest LST)" nil (quote macro))

(autoload 'xand "+logic" "\


\(fn FN &rest LST)" nil (quote macro))

;;;***

;;;### (autoloads (elf) "+loop" "+loop.el" (20250 26799))
;;; Generated autoloads from +loop.el

(autoload 'elf "+loop" "\
&optional verb pred &rest form

\(fn &rest FORM)" nil (quote macro))

;;;***

;;;### (autoloads (wordpress) "+parse" "+parse.el" (20247 33952))
;;; Generated autoloads from +parse.el

(autoload 'wordpress "+parse" "\


\(fn BEG END)" t nil)

;;;***

;;;### (autoloads (lua-shell x-shell run-current-file) "+script"
;;;;;;  "+script.el" (20336 37645))
;;; Generated autoloads from +script.el

(autoload 'run-current-file "+script" "\
Execute or compile the current file.
For example, if the current buffer is the file x.pl,
then it'll call “perl x.pl” in a shell.
The file can be php, perl, python, bash, java.
File suffix is used to determine what program to run.

\(fn)" t nil)

(autoload 'x-shell "+script" "\


\(fn PROG)" nil nil)

(autoload 'lua-shell "+script" "\
make a lua shell

\(fn)" t nil)

(autoload 'run-ruby "inf-ruby" "\
Run an inferior Ruby process" t)

;;;***

;;;### (autoloads (sdcv-to-buffer) "+sdcv" "+sdcv.el" (20223 21642))
;;; Generated autoloads from +sdcv.el

(autoload 'sdcv-to-buffer "+sdcv" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (skeleton-pair-alist-update) "+skeleton-pair" "+skeleton-pair.el"
;;;;;;  (20505 16351))
;;; Generated autoloads from +skeleton-pair.el

(autoload 'skeleton-pair-alist-update "+skeleton-pair" "\


\(fn)" t nil)

;;;***

;;;### (autoloads (shell-command-symbol-to-string join-string) "+string"
;;;;;;  "+string.el" (20263 39852))
;;; Generated autoloads from +string.el

(autoload 'join-string "+string" "\
(mapconcat 'identity lst s)

\(fn LST S)" nil nil)

(autoload 'shell-command-symbol-to-string "+string" "\


\(fn &rest S)" nil (quote macro))

(defalias 'ss 'shell-command-symbol-to-string)

;;;***

;;;### (autoloads (test-times test-list eval-buffer-time mklst) "+test"
;;;;;;  "+test.el" (20219 6040))
;;; Generated autoloads from +test.el

(autoload 'mklst "+test" "\
创建大小为 n 的字符串列表

\(fn N)" nil nil)

(autoload 'eval-buffer-time "+test" "\


\(fn)" t nil)

(autoload 'test-list "+test" "\
用大小为 n 的字符串列表，测试函数 fn (fn 最后一个参数为列表)

\(fn N &rest FN)" nil (quote macro))

(autoload 'test-times "+test" "\
计算 body 运行 n 次所需时间

\(fn N &rest BODY)" nil (quote macro))

;;;***

(provide '_loaddefs)
;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; coding: utf-8
;; End:
;;; _loaddefs ends here
