(("arith.el"
  (20758 14973 771000)
  (autoload 'average
    (expand-file-name "_autoload/arith" *init-dir*)
    "Not documented.\n\n(fn &rest lst)" nil nil))
 ("auto-pair.el"
  (20758 14973 719000)
  (autoload 'my-auto-pair
    (expand-file-name "_autoload/auto-pair" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("autoload.el"
  (20758 14973 701000)
  (autoload 'uatld
    (expand-file-name "_autoload/autoload" *init-dir*)
    "Not documented.\n\n(fn dir &optional loaddefs basedir)" nil nil))
 ("bind-keys.el"
  (20758 14973 683000)
  (autoload 'bind-keys
    (expand-file-name "_autoload/bind-keys" *init-dir*)
    "bind some key like \"C-m\" \"C-i\" \"C-[\"\n\n(fn map &rest kd)" nil nil)
  (autoload 'def-keys-low
    (expand-file-name "_autoload/bind-keys" *init-dir*)
    "bind some key like \"C-m\" \"C-i\" \"C-[\"\n\n(fn map &rest kd)" nil nil))
 ("buffer.el"
  (20758 14973 663000)
  (autoload 'substring-buffer-name
    (expand-file-name "_autoload/buffer" *init-dir*)
    "使用 substring 截取文件名时，在 buffer-name 后面加几个字符，防止文件名过短引发错误。m n 参数同`substring'的 from to，可选参数 x 存在时截取带路径的文件名。\n\n(fn m n &optional x)" nil nil)
  (autoload 'my-clean-buffer
    (expand-file-name "_autoload/buffer" *init-dir*)
    "Kill buffers as per `my-clean-buffer-list' and `my-clean-buffer-modes'.\n\n(fn)" t nil))
 ("column.el"
  (20758 14973 641000)
  (autoload 'copy-word-on-column
    (expand-file-name "_autoload/column" *init-dir*)
    "Not documented.\n\n(fn &optional n)" t nil)
  (autoload 'copy-sexp-on-column
    (expand-file-name "_autoload/column" *init-dir*)
    "Not documented.\n\n(fn &optional n)" t nil)
  (autoload 'calc-column
    (expand-file-name "_autoload/column" *init-dir*)
    "Not documented.\n\n(fn fn)" t nil))
 ("dired.el"
  (20758 14973 623000)
  (autoload 'rename-file-specify-extension
    (expand-file-name "_autoload/dired" *init-dir*)
    "Not documented.\n\n(fn &optional suf)" t nil))
 ("dos2unix.el"
  (20758 14973 569000)
  (autoload 'dos2unix
    (expand-file-name "_autoload/dos2unix" *init-dir*)
    "Convert a DOS formatted text buffer to UNIX format\n\n(fn)" t nil)
  (autoload 'unix2dos
    (expand-file-name "_autoload/dos2unix" *init-dir*)
    "Convert a UNIX formatted text buffer to DOS format\n\n(fn)" t nil)
  (autoload 'del^M
    (expand-file-name "_autoload/dos2unix" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("edit-ad.el"
  (20758 14973 550000)
  (autoload 'parallel-edit
    (expand-file-name "_autoload/edit-ad" *init-dir*)
    "Not documented.\n\n(fn position-list &optional prt)" t nil))
 ("edit-lisp.el"
  (20758 14973 532000)
  (autoload 'outside
    (expand-file-name "_autoload/edit-lisp" *init-dir*)
    "up list N level, append PRE ahead and SUF behind, backward M char\n\n(fn o b s &optional n)" t nil)
  (autoload 'outside-kill
    (expand-file-name "_autoload/edit-lisp" *init-dir*)
    "up list N level, append PRE ahead and SUF behind, backward M char\n\n(fn &optional n)" t nil))
 ("edit.el"
  (20758 14973 514000)
  (autoload 'swap-point
    (expand-file-name "_autoload/edit" *init-dir*)
    "Not documented.\n\n(fn)" t nil)
  (autoload 'beacon
    (expand-file-name "_autoload/edit" *init-dir*)
    "Not documented.\n\n(fn)" t nil)
  (autoload 'resize-horizontal-space
    (expand-file-name "_autoload/edit" *init-dir*)
    "Not documented.\n\n(fn &optional backward-only)" t nil)
  (autoload 'smart-backward-kill
    (expand-file-name "_autoload/edit" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("file.el"
  (20758 14973 494000)
  (autoload 'read-lines
    (expand-file-name "_autoload/file" *init-dir*)
    "Return a list of lines in FILEPATH.\n\n(fn filePath)" nil nil)
  (autoload 'find-temp
    (expand-file-name "_autoload/file" *init-dir*)
    "Not documented.\n\n(fn &optional suffix)" t nil)
  (autoload 'write-temp
    (expand-file-name "_autoload/file" *init-dir*)
    "Not documented.\n\n(fn filename &optional confirm)" t nil))
 ("font.el"
  (20758 14973 440000)
  (autoload 'usage-font
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn &rest fonts)" nil nil)
  (autoload 'set-my-font0
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn &rest lst)" nil nil)
  (autoload 'set-font
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn script font &optional size)" nil nil)
  (autoload 'set-my-font
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn base-fonts base-font-size &optional ext-fonts ext-font-size)" nil nil)
  (autoload 'set-my-bf-mode
    (expand-file-name "_autoload/font" *init-dir*)
    "set buffer face mode\n\n(fn font size)" nil nil)
  (autoload 'set-my-ui-font
    (expand-file-name "_autoload/font" *init-dir*)
    "set mode-line & header-line\n\n(fn height font)" nil nil)
  (autoload 'my-buffer-face-mode
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn &optional ls)" nil nil)
  (autoload 'custom-buffer-face-mode
    (expand-file-name "_autoload/font" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("function.el"
  (20758 14973 420000)
  (autoload 'temp-func-add
    (expand-file-name "_autoload/function" *init-dir*)
    "Not documented.\n\n(fn &optional beg end)" t nil)
  (autoload 'temp-func-call
    (expand-file-name "_autoload/function" *init-dir*)
    "Not documented.\n\n(fn &optional n)" t nil)
  (autoload 'set-local-variable
    (expand-file-name "_autoload/function" *init-dir*)
    "Not documented.\n\n(fn &optional v)" t nil))
 ("hash.el"
  (20758 14973 400000)
  (autoload 'cons2hash
    (expand-file-name "_autoload/hash" *init-dir*)
    "Not documented.\n\n(fn lst)" nil nil)
  (autoload 'build-hash-table
    (expand-file-name "_autoload/hash" *init-dir*)
    "Not documented.\n\n(fn &rest lst)" nil nil)
  (autoload 'list-hash
    (expand-file-name "_autoload/hash" *init-dir*)
    "Not documented.\n\n(fn hash-table &optional with-value)" nil nil))
 ("insert.el"
  (20758 14973 382000)
  (autoload 'comment-block
    (expand-file-name "_autoload/insert" *init-dir*)
    "Not documented.\n\n(fn &optional beg end)" t nil)
  (autoload 'insert-autoload-magic-comment
    (expand-file-name "_autoload/insert" *init-dir*)
    "Not documented.\n\n(fn)" t nil)
  (autoload 'insert-time
    (expand-file-name "_autoload/insert" *init-dir*)
    "Not documented.\n\n(fn &optional time format)" t nil)
  (autoload 'insert-delimit-line
    (expand-file-name "_autoload/insert" *init-dir*)
    "Not documented.\n\n(fn &optional n time)" t nil)
  (autoload 'insert-doc-head
    (expand-file-name "_autoload/insert" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("list.el"
  (20758 14973 360000)
  (autoload 'to-alist-l
    (expand-file-name "_autoload/list" *init-dir*)
    "(to-alist-l '(1 2 3 4 5 6)) => ((1 . 2) (3 . 4) (5 . 6))\n\n(fn &rest lst)" nil nil)
  (autoload 'mkal
    (expand-file-name "_autoload/list" *init-dir*)
    "(mkal 1 2 3 4 5 6) => ((1 . 2) (3 . 4) (5 . 6))\n\n(fn &rest rest)" nil t)
  (autoload 'zip-lists
    (expand-file-name "_autoload/list" *init-dir*)
    "(zip-lists '(1 3 5) '(2 4 6)) => ((1 . 2) (3 . 4) (5 . 6))\n\n(fn f a &optional b)" nil nil)
  (autoload 'merge-lists
    (expand-file-name "_autoload/list" *init-dir*)
    "(merge-lists '(1 2) '(3 4) '(5 6)) => ((1 3 5) (2 4 6))\n\n(fn &rest lists)" nil nil)
  (autoload 'add-to-list-p
    (expand-file-name "_autoload/list" *init-dir*)
    "See also `add-to-list-x'\n\n(fn LIST-VAR &optional BASE &rest REST)" nil nil))
 ("load.el"
  (20758 14973 307000)
  (autoload 'load-once
    (expand-file-name "_autoload/load" *init-dir*)
    "Not documented.\n\n(fn &rest s)" nil t)
  (autoload 'load1
    (expand-file-name "_autoload/load" *init-dir*)
    "Not documented.\n\n(fn file)" nil nil))
 ("logic.el"
  (20758 14973 289000)
  (autoload 'xor
    (expand-file-name "_autoload/logic" *init-dir*)
    "like find-if\n\n(fn fn &rest lst)" nil t)
  (autoload 'xand
    (expand-file-name "_autoload/logic" *init-dir*)
    "Not documented.\n\n(fn fn &rest lst)" nil t))
 ("loop.el"
  (20758 14973 271000)
  (autoload 'elf
    (expand-file-name "_autoload/loop" *init-dir*)
    "&optional verb pred &rest form\n\n\n(fn &rest form)" nil t))
 ("parse.el"
  (20758 14973 250000)
  (autoload 'wordpress
    (expand-file-name "_autoload/parse" *init-dir*)
    "Not documented.\n\n(fn beg end)" t nil))
 ("script.el"
  (20758 14973 232000)
  (autoload 'run-current-file
    (expand-file-name "_autoload/script" *init-dir*)
    "Execute or compile the current file.\nFor example, if the current buffer is the file x.pl,\nthen it'll call “perl x.pl” in a shell.\nThe file can be php, perl, python, bash, java.\nFile suffix is used to determine what program to run.\n\n(fn)" t nil)
  (autoload 'x-shell
    (expand-file-name "_autoload/script" *init-dir*)
    "Not documented.\n\n(fn prog)" nil nil)
  (autoload 'lua-shell
    (expand-file-name "_autoload/script" *init-dir*)
    "make a lua shell\n\n(fn)" t nil))
 ("sdcv.el"
  (20758 14973 179000)
  (autoload 'sdcv-to-buffer
    (expand-file-name "_autoload/sdcv" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("skeleton-pair.el"
  (20758 14973 160000)
  (autoload 'skeleton-pair-alist-update
    (expand-file-name "_autoload/skeleton-pair" *init-dir*)
    "Not documented.\n\n(fn)" t nil))
 ("string.el"
  (20758 14973 140000)
  (autoload 'join-string
    (expand-file-name "_autoload/string" *init-dir*)
    "(mapconcat 'identity lst s)\n\n(fn lst s)" nil nil)
  (autoload 'shell-command-symbol-to-string
    (expand-file-name "_autoload/string" *init-dir*)
    "Not documented.\n\n(fn &rest s)" nil t))
 ("test.el"
  (20758 14973 122000)
  (autoload 'mklst
    (expand-file-name "_autoload/test" *init-dir*)
    "创建大小为 n 的字符串列表\n\n(fn n)" nil nil)
  (autoload 'eval-buffer-time
    (expand-file-name "_autoload/test" *init-dir*)
    "\n\n(fn)" t nil)
  (autoload 'test-list
    (expand-file-name "_autoload/test" *init-dir*)
    "用大小为 n 的字符串列表，测试函数 fn (fn 最后一个参数为列表)\n\n(fn n &rest fn)" nil t)
  (autoload 'test-times
    (expand-file-name "_autoload/test" *init-dir*)
    "计算 body 运行 n 次所需时间\n\n(fn n &rest body)" nil t)))
